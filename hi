#!/usr/bin/python3
import re, requests, os, sys

try :
	from rich import print
except ImportError:
	pass

# Constants
API_KEY_ENV_VAR = 'PERPLEXITY_API_KEY'
API_KEY = os.getenv(API_KEY_ENV_VAR)
API_URL = 'https://api.perplexity.ai/chat/completions'
AVAILABLE_MODELS = ["llama-3.1-sonar-small-128k-chat", "llama-3.1-sonar-large-128k-chat"
					, "llama-3.1-8b-instruct", "llama-3.1-70b-instruct"]
ONLINE_MODELS = ["llama-3.1-sonar-small-128k-online", "llama-3.1-sonar-large-128k-online",
				  "llama-3.1-sonar-huge-128k-online"]
DEFAULT_CONTEXT = "Be precise and concise"
HEADERS = {
	"accept": "application/json",
	"content-type": "application/json",
	"authorization": "Bearer " + API_KEY
}

def testApiKey(api_key: str):
	header = {
		"authorization": "Bearer " + api_key
	}
	payload = {
		"model": AVAILABLE_MODELS[0],
		"messages": [{
			"role": "user",
			"content": "hi",
		}],
	}
	response = requests.post(API_URL, json = payload, headers=header )
	if response.status_code == 200:
		return
	print(color("Inavalid API Key. Get one and come back", "red"))
	exit(1)
	
	

# def update_api_key():
# 	home = os.getenv("HOME")
# 	new_key = input("New API Key: ")
# 	env_var_name = "PERPLEXITY_API_KEY"
# 	testApiKey(new_key)
# 	shell_file = home + "/.bashrc"
# 	# print(shell_file)
# 	# exit()
# 	with open(shell_file) as file:
# 		lines = file.readlines()
# 	updated_lines = []
# 	api_key_line = None
		
# 	for line in lines:
# 		# print(line)
# 		if line.strip().find('PERPLEXITY_API_KEY=') != -1:
# 			api_key_line = line.strip()
# 			print(f"THE LINE IS THERE: {line}")
# 			# updated_lines.append(f'PERPLEXITY_API_KEY={new_key}')
		
# 	updated_lines.append(line)
# 	# if api_key_line:
# 	lines = updated_lines[-1]
# 	print(f"--Lines--\n {lines}")
# 	exit	
	# with open("./bashrc", 'w') as file:
	# 	file.writelines(updated_lines)

if not API_KEY:
	print("Please set the PERPLEXITY_API_KEY environment variable to your api key")
	print("You can get an API key by signing up at https://www.perplexity.ai/settings/api")
	update_api_key()

def color(text, color):
	if 'rich' in sys.modules:
		return f"[{color}]{text}\033"
	return text

def printAvailableModels():
	print("\t Available models:")
	for i in range(len(AVAILABLE_MODELS)):
		print(f"		[{i}] - {AVAILABLE_MODELS[i]}")
	print("\t Online models:")
	print(f"		so - {ONLINE_MODELS[0]}")
	print(f"		lo - {ONLINE_MODELS[1]}")
	print(f"		ho - {ONLINE_MODELS[2]}")
	

def pick_model(model):
	if not model:
		return AVAILABLE_MODELS[0]
	if model.isdigit() and int(model) < len(AVAILABLE_MODELS):
		model = AVAILABLE_MODELS[int(model)]
	if model is not None and (model in AVAILABLE_MODELS or model in ONLINE_MODELS):
		return model
	match model:
		case "so":
			return ONLINE_MODELS[0]
		case "lo":
			return ONLINE_MODELS[1]
		case "ho":
			return ONLINE_MODELS[2]
		case _ if model != "?":
			print(f'''Invalid model name, the model will be set to {AVAILABLE_MODELS[0]}''')
			return AVAILABLE_MODELS[0]
		case _:
			printAvailableModels()
			model = input(f'''Choose a model (press enter for {AVAILABLE_MODELS[0]}): ''')
			return pick_model(model)

def chat_loop(question: str, model: str = AVAILABLE_MODELS[0], context: str = DEFAULT_CONTEXT, single_use: bool = True):
	chat_payload = {
		"model": model,
	}
	chat_payload["messages"] = []
	if model in AVAILABLE_MODELS and context: #ie offline model
		chat_payload["messages"].append({
			"role": "system",
			"content": context
		})
	while (question != "exit"):
		if not single_use:
			print(color("You: ", "blue"), end="")
			question = input()
			if not question or question.lower() == "new chat":
				newchat_bool = input("--> Start a new chat (y/n)? \n\t")
				if newchat_bool.lower() in ['yes', 'y']:
					chat_payload["messages"] = []
					print(color("---NEW CHAT---", "cyan"))
				else:
					print(color("/^.^\\ ", "purple" ) + " Lets continue our little chat")
				continue
			elif (question == "change model"):
				print(color("/^.^\\ ", "purple" ))
				model = pick_model("?")
				print(color("/^.^\\ ", "purple" ) + f"Using {model} now")
				continue
			elif (question == "exit"):
				exit()
		chat_payload["messages"].append({
			"role": "user",
			"content": question
		})
		response = requests.post(API_URL, json=chat_payload, headers=HEADERS)
		if response.status_code != 200:
			print(color("Error: " + response.text, "red"))
			exit()
		chat_payload["messages"].append({
			"role": "assistant",
			"content": response.json()["choices"][0]["message"]["content"]
		})
		message = response.json()["choices"][0]["message"]["content"]
		if (single_use):
			print(message)
			return
		print(color("/^.^\\ ", "purple" ) + message)


def read_promt():
	prompt = sys.argv[1]
	if not sys.stdin.isatty():
		stdin_prompt = sys.stdin.read()
		if prompt:
			prompt += ("\n````\n")
			prompt += (stdin_prompt)
			prompt += ("\n````")
		elif stdin_prompt:
			prompt = stdin_prompt
	return prompt

def main(): # params
	if len(sys.argv) < 2 or sys.argv[1] == "help" or sys.argv[1] == "?" or sys.argv[1] == "h" or sys.argv[1] == "about" or sys.argv[1] == "-h" or not sys.argv[1]:
		print("welcome to the perplexity command line ai!")
		print(f'''
		This is a simple command line interface to interact with the perplexity api in one of two ways: 
		- get a response to a question
		- chat with the bot.
		To get a response to a question, use the following syntax:
		- CMD "Question" "Model (Optinal)" "System prompt (Optinal)"
		E.g. hi "What is the capital of Nigeria?" 0 {DEFAULT_CONTEXT} 
		To chat with the bot, use the following syntax:
		- CMD "chat" "Model (Optinal)" "System prompt (Optinal)"
		E.g. hi "chat" 1 {DEFAULT_CONTEXT} 
		To see the available models, use the following syntax:
		- hi "models"
		''')
		printAvailableModels()
		print(f'''
		To exit the chat, type "exit" at any time.
		''')
		exit()

	question = read_promt() # sys.argv[1]
	model = pick_model(sys.argv[2] if len(sys.argv) > 2 else None)
	context = sys.argv[3] if len(sys.argv) > 3 else DEFAULT_CONTEXT

	if question == "models":
		print("Available models:" + str(AVAILABLE_MODELS))
		exit()


	single_use = False if question == "chat" else True
	chat_loop(question, model, context, single_use)

if __name__ == "__main__":
	main()
