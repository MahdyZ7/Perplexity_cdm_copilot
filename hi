#!/usr/bin/python3
import requests
import sys
import argparse
import hi_constants as CONST
import hi_settings as settings
import hi_help as help

try:
	from rich import print
except ImportError:
	from builtins import print

try :
	from openai import OpenAI
	STREAMRESPONSE = True
except ImportError:
	STREAMRESPONSE = False

RICH_AVAILABLE = 'rich' in sys.modules

def color(text, color) -> str:
	if RICH_AVAILABLE:
		return f"[{color}]{text}[/]"
	if color not in CONST.COLORS:
		return text
	return f"{CONST.COLORS[color]}{text}{CONST.COLORS['reset']}"

if not CONST.API_KEY:
	print("Please set the PERPLEXITY_API_KEY environment variable to your api key")
	print("You can get an API key by signing up at https://www.perplexity.ai/settings/api")
	settings.update_api_key()


def printCitations(citations: list[str]) -> None:
	if citations is not None:
		print("_" * 3)
		for index, source in enumerate(citations):
			print(f"[{index + 1}] {source}")

def preparePayload(model: str = CONST.AVAILABLE_MODELS[0], context: str = CONST.DEFAULT_CONTEXT, args: argparse.Namespace = argparse.Namespace()) -> dict:
	chat_payload = {
		"model": model,
		"messages": []
	}

	if hasattr(args, 'include') and args.include:
		chat_payload["search_domain_filter"] = args.include
	elif hasattr(args, 'exclude') and args.exclude:
		chat_payload["search_domain_filter"] = [f"-{domain}" for domain in args.exclude]
	if hasattr(args, 'recency') and args.recency:
		chat_payload["search_recency_filter"] = args.recency
	if hasattr(args, 'related') and args.related:
		chat_payload["return_related_questions"] = True
	if context:
		chat_payload["messages"].append({
			"role": "system",
			"content": context
		})
	return chat_payload

def handleUserInput(chat_payload: dict, args: argparse.Namespace) -> str:
    if not args.single_use:
        print(color("You: ", "blue"), end="")
        question = input()
        if not question or question.lower() == "new chat":
            newchat_bool = input("--> Start a new chat (y/n)? \n\t")
            if newchat_bool.lower() in ['yes', 'y']:
                chat_payload["messages"] = []
                print(color("---NEW CHAT---", "cyan"))
            else:
                print(color("/^.^\\ Lets continue our little chat", "purple"))
            return ""
        elif question == "change model":
            print(color("/^.^\\ ", "purple" ))
            model = help.pick_model("?")
            print(color(f"/^.^\\ Using {model} now", "purple" ))
            chat_payload["model"] = model
            return ""
        elif question == "exit":
            exit()
        else:
            chat_payload["messages"].append({
                "role": "user",
                "content": question
            })
            return question
    else:
        chat_payload["messages"].append({
            "role": "user",
            "content": args.question
        })
        return args.question

def sendRequest(chat_payload: dict) -> str:
	try:
		response = requests.post(CONST.API_URL, json=chat_payload, headers=CONST.HEADERS, timeout=CONST.TIMEOUT)
		response.raise_for_status()
		displayResponse(response)
		printCitations(response.json().get('citations'))
		return response.json()["choices"][0]["message"]["content"]
	except requests.exceptions.RequestException as e:
		print(color(f"Error: {e}", "red"))
		exit()
	
def streamRequest(chat_payload: dict) -> str:
	try:
		response_message = ""
		citations= []
		first_response = True
		client = OpenAI(api_key=CONST.API_KEY, base_url=CONST.API_URL_BASE)
		response_stream = client.chat.completions.create(
			model=chat_payload["model"],
			messages=chat_payload["messages"],
			stream=True
		)
		print(color(f"{chat_payload['model']}: ", "purple"), end="")
		for response in response_stream:
			if first_response:
				first_response = False
				citations =  response.citations if hasattr(response, "citations") else []
			response_message += response.choices[0].delta.content
			print(response.choices[0].delta.content, end="", flush=True)
		print()
		printCitations(citations)
		return response_message
	except requests.exceptions.RequestException as e:
		print(color(f"Error: {e}", "red"))
		exit()

def displayResponse(response: requests.Response) -> None:
	print(color(f"{response.json()['model']}: ", "purple"), end=" ")
	print(response.json()["choices"][0]["message"]["content"])
	# if args.related:
		# 	print(color("Related questions: ", "purple"), end="")
		# 	print(response.json().get('related_questions'))


def chat_loop(model: str = CONST.AVAILABLE_MODELS[0], context: str = CONST.DEFAULT_CONTEXT, args: argparse.Namespace = argparse.Namespace()) -> None:
	chat_payload = preparePayload(model, context, args)
	while args.question != "exit":
		args.question = handleUserInput(chat_payload, args)
		if not args.question:
			continue
		if STREAMRESPONSE:
			message = streamRequest(chat_payload)
		else:
			message = sendRequest(chat_payload)
		chat_payload["messages"].append({
			"role": "assistant",
			"content": message
		})
		if args.single_use:
			return


def read_prompt(prompt: str = "") -> str:
	if not sys.stdin.isatty():
		stdin_prompt = sys.stdin.read().strip()
		if prompt:
			return(f"{prompt}\n````\n{stdin_prompt}\n````")
		elif stdin_prompt:
			return(stdin_prompt)
	return prompt

def cliParsing():
	parser = argparse.ArgumentParser(
		prog='hi',
		formatter_class=argparse.RawDescriptionHelpFormatter,
		description=help.description())
	parser.add_argument('question', type=str, nargs='?', help='The question to ask the AI')
	parser.add_argument('model', type=str, nargs='?', help='The model to use')
	parser.add_argument('context', type=str, nargs='?', help='The context to use')
	parser.add_argument('-u', '--update', action='store_true', help='Update the hi command')
	parser.add_argument('-m', '--model', type=str, help=f'Select the model type in api {CONST.AVAILABLE_MODELS}', default="0")
	parser.add_argument('-c', '--context', type=str, help='The System prompt to use', default=CONST.DEFAULT_CONTEXT)

	domains = parser.add_mutually_exclusive_group()
	domains.add_argument('-i', '--include', type=str, nargs='+' , help='The domain to use')
	domains.add_argument('-e', '--exclude', type=str, nargs='+' , help='The domain not to use', )
	parser.add_argument('-T', '--recency', type=str, choices=['month', 'week', 'day', 'hour'], help='Recency filter')
	parser.add_argument('-R', '--related', action='store_true', help='Get related questions')
	
	return parser.parse_args()

def main():
	args = cliParsing()
	args.question = read_prompt(args.question)
	args.model = help.pick_model(args.model)
	context = args.context

	if args.update or args.question == "update":
		print("Updating hi")
		settings.update()
		exit()
	if args.question == None or args.question.lower() == "help" or args.question == "h" or args.question == "?":
		print(help.description())
		exit()
	if args.question == "models":
		print(help.availableModels())
		exit()
	args.single_use = (args.question != "chat")
	chat_loop(args.model, context, args)

if __name__ == "__main__":
	main()
